<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>computing on</title><link>https://yifanyin.github.io/tags/computing/</link><description>Recent content in computing on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://yifanyin.github.io/tags/computing/index.xml" rel="self" type="application/rss+xml"/><item><title>Parallel computing</title><link>https://yifanyin.github.io/notes/parallel-computing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yifanyin.github.io/notes/parallel-computing/</guid><description>Intro The tutorial from the Lawrence Livermore National Laboratory And the one from ETH Parallel computer taxonomy by Flynn SISD: Base case of a single instruction stream and single data stream SIMD Single instruction: all processing units execute the same instruction at any given clock cycle Multiple data: Each processing unit can operate on a different data element MISD: multiband filter, code cracking MIMD: every computer now Jargons A node = a computer in a box execution units hardware threads Speedup and scalability Amdahl&amp;rsquo;s law Strong scaling If a fraction $p$ of your code execution time can be parallelized, then ideally the best speedup from parallelize it is $\frac{1}{1-p}$.</description></item></channel></rss>